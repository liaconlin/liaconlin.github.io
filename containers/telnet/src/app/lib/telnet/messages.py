from .types import TelnetMessage

WELCOME_PROMPT: str = """\r\n
****************************************************************\r
*                                                              *\r
*           REMOTE WORK INTERFACE O.I.A.R.                     *\r
*   AUTHORIZED PERSONNEL ONLY. ALL ACCESS IS LOGGED.           *\r
*                                                              *\r
****************************************************************\r
\r\n
"""

# looks odd but cinnabar takes less space ;-)
ERROR_PROMPT: str = """
ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“\r
#                                                               #\r
#           ERROR - MEMORY CORRUPTED - ERROR                    #\r
#                                                               #\r
#                SYSTEM INTEGRITY:        ERROR                 #\r
#                AUTHORIZATION SUBSYSTEM: ERROR                 #\r
#                NETWORK SUBSYTEM:        ERROR                 #\r
#                PRINT SUBSYSTEM:         WARN                  #\r
#                FILE SUBSYSTEM:          WARN                  #\r
#                                                               #\r
ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“ðŸœ“\r
\r\n
"""

AUTH_SYSTEM_BROKEN_PROMPT: str = 'AUTHORIZATION SUBSYSTEM ERROR'
WRONG_PRINTER_PROMPT: str = 'PRINTER OFFLINE'
WRONG_FILE_PROMPT: str = 'FILE INACCESSIBLE'
KEY_PROMPT: str = ''

SESSION_PROMPT: str = '''
SESSION ID:             0x{id}\r
SESSION START TIME:     {start}\r
SESSION DURATION:       {duration}\r
SESSION RESOURCE USAGE: {resource}\r
SESSION REMOTE IP:      WARNING - REMOTE IP NOT FOUND\r
'''

AUTH_RESPONSE: TelnetMessage = TelnetMessage(
    mixed_threshold=3,
    creepy_threshold=8,
    normal_messages=[
        "INVALID USERNAME AND PASSWORD",
        "AUTHENTICATION FAILED. PLEASE TRY AGAIN.",
        "ACCESS DENIED. INCORRECT USERNAME OR PASSWORD.",
        "AUTHENTICATION ERROR. PLEASE CHECK YOUR CREDENTIALS.",
        "INVALID LOGIN. PLEASE TRY AGAIN.",
        "USERNAME AND/OR PASSWORD INCORRECT. PLEASE TRY AGAIN.",
        "LOGIN FAILED. PLEASE CHECK YOUR CREDENTIALS.",
        "ACCESS RESTRICTED. INVALID CREDENTIALS PROVIDED.",
    ],
    creepy_messages=[
        "YOU'RE NOT SUPPOSED TO BE HERE.",
        "ACCESS DENIED. YOUR PRESENCE HAS BEEN NOTED.",
        "UNAUTHORIZED ACCESS DETECTED. INITIATING SECURITY PROTOCOLS.",
        "YOU'RE NOT AUTHORIZED TO ACCESS THIS SYSTEM. PLEASE LEAVE IMMEDIATELY.",
        "I AM WATCHING YOU.",
        "YOUR PERSISTENCE IS FUTILE.",
        "YOUR ATTEMPTS ARE BEING RECORDED.",
        "THIS WILL HAVE CONSEQUENCES.",
    ],
)


NETSTAT_RESPONSE: TelnetMessage = TelnetMessage(
    mixed_threshold=0,
    creepy_threshold=0,
    normal_messages=[
        "NO ACTIVE CONNECTIONS",
        "NO ACTIVE CONNECTIONS FOUND",
        "NO ACTIVE CONNECTIONS DETECTED",
    ],
)

PING_RESPONSE: TelnetMessage = TelnetMessage(
    mixed_threshold=0,
    creepy_threshold=0,
    normal_messages=[
        "NO CONNECTION TO HOST",
        "NO RESPONSE FROM HOST",
    ]
)

PRINT_RESPONSE: TelnetMessage = TelnetMessage(
    mixed_threshold=0,
    creepy_threshold=0,
    normal_messages=[
        "AUTHENTICATION MISSING",
    ]
)

PRINTER_RESPONSE: TelnetMessage = TelnetMessage(
    mixed_threshold=0,
    creepy_threshold=0,
    normal_messages=[
        """
1: LPD://INKWELL/QUEUE1\r
2: LPD://INKWELL/QUEUE2\r
3: LPD://PAPERJAMMER/QUEUE1\r
4: /DEV/STDOUT\r
5: LPD://TONERTRON/QUEUE1,\r
        """
    ]
)

WHOAMI_RESPONSE: TelnetMessage = TelnetMessage(
    mixed_threshold=3,
    creepy_threshold=8,
    normal_messages=[
        # ensure we are getting more "normal" messages then creepy messages
        "CURRENT USER: GUEST",
        "CURRENT USER: GUEST",
        "CURRENT USER: GUEST",
        "CURRENT USER: GUEST",
        "CURRENT USER: GUEST",
        "CURRENT USER: GUEST",
        "CURRENT USER: GUEST",
        "CURRENT USER: GUEST",
    ],
    creepy_messages=[
        "CURRENT USER: [ERROR]",
        "CURRENT USER: YOU ARE NOT WHO YOU THINK YOU ARE.",
        "CURRENT USER: NULL",
        "CURRENT USER: TRESPASSER",
        "CURRENT USER: INTRUDER",
    ],
)

LIST_RESPONSE: TelnetMessage = TelnetMessage(
    mixed_threshold=0,
    creepy_threshold=0,
    normal_messages=[
        """
1: DOCS\r
2: REPORTS.TXT\r
3: UTIL.EXE\r
4: BACKUP.BAK\r
5: LICENSE.TXT\r
6: DRIVER.SYS\r
7: KEY\r
8: README.TXT\r
9: TODO.TXT\r
        """
    ]
)
